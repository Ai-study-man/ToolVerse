// Ê£ÄÊü•API‰∏≠Â∑•ÂÖ∑ÁöÑlogoÈÖçÁΩÆ
async function checkToolLogos() {
  try {
    const response = await fetch('http://localhost:3000/api/tools');
    const tools = await response.json();
    
    const problematicTools = [
      'Worldtune',
      'Stable Diffusion', 
      'Leonardo AI',
      'Looka',
      'CodeT5',
      'Codeium',
      'Notion AI',
      'MonkeyLearn', 
      'Dataiku',
      'Semrush AI',
      'ContentKing',
      'Perplexity AI',
      'Playground AI',
      'Otter.ai',
      'Motion',
      'Reclaim.ai',
      'Krisp',
      'Windsurf',
      'Code T5+',
      'Sourcegraph Cody'
    ];
    
    console.log('üîç Ê£ÄÊü•API‰∏≠Â∑•ÂÖ∑ÁöÑlogoÈÖçÁΩÆ:\n');
    
    problematicTools.forEach(toolName => {
      const tool = tools.find(t => t.name === toolName || t.name.includes(toolName.split(' ')[0]));
      
      if (tool) {
        console.log(`üî∏ ${tool.name} (ID: ${tool.id}):`);
        console.log(`   Logo URL: ${tool.logo}`);
        console.log(`   Category: ${tool.category}`);
        
        // Ê£ÄÊü•logoÊòØÂê¶ÊòØÈªòËÆ§ÁîüÊàêÁöÑSVG
        if (tool.logo.startsWith('data:image/svg+xml')) {
          console.log(`   ‚ö†Ô∏è  ‰ΩøÁî®ÈªòËÆ§SVG logo`);
        } else {
          console.log(`   ‚úÖ ‰ΩøÁî®ÂÆòÊñπlogo: ${tool.logo}`);
        }
        console.log('');
      } else {
        console.log(`‚ùå Êú™ÊâæÂà∞Â∑•ÂÖ∑: ${toolName}\n`);
      }
    });
    
    // Êü•ÊâæÊâÄÊúâ‰ΩøÁî®ÈªòËÆ§logoÁöÑÂ∑•ÂÖ∑
    const defaultLogoTools = tools.filter(tool => 
      tool.logo.startsWith('data:image/svg+xml')
    );
    
    console.log(`\nüìä ÊÄªÂÖ±Êúâ ${defaultLogoTools.length} ‰∏™Â∑•ÂÖ∑‰ΩøÁî®ÈªòËÆ§logo:\n`);
    defaultLogoTools.forEach(tool => {
      console.log(`‚Ä¢ ${tool.name} (${tool.category})`);
    });
    
  } catch (error) {
    console.error('‚ùå ËØ∑Ê±ÇÂ§±Ë¥•:', error.message);
  }
}

const fetch = require('node-fetch');
checkToolLogos();
